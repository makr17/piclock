#!/usr/bin/env python

import datetime
import httplib
import json
import time
import yweather

from fysom import Fysom
from quick2wire.gpio import pins, In, Out, Rising, Falling, Both, PullDown
from quick2wire.selector import Selector, Timer
from Adafruit_7Segment import SevenSegment

segment = SevenSegment(address=0x70)
brightness = 5
ywclient = yweather.Client()
loc = get_location()
loc_id = ywclient.fetch_woeid(loc)
weather = ywclient.fetch_weather(loc_id, metric=False)

# setup the statemachine
fsm = Fysom('events': [
                {'name': 'startup', 'src': 'none', 'dst': 'clock'},
                {'name': 'mode', 'src': 'clock', 'dst': 'temp'},
                {'name': 'mode', 'src': 'temp', 'dst': 'alarm1'},
                {'name': 'mode', 'src': 'alarm1', 'dst': 'alarm2'},
                {'name': 'mode', 'src': 'alarm2', 'dst': 'clock'},
                {'name': 'timeout', 'src': '*', 'dst': 'clock'},
                {'name': 'alarm', 'src': '*', 'dst': 'alarm'},
                {'name': 'alarm_done', 'src': 'alarm', 'dst': 'clock'},
])

def get_location():
    geo = get_geoip()
    loc = geo['city'] + ', ' + geo['region_code'] + '  ' + geo['postal_code']
    print loc
    return loc

def get_geoip():
    conn = httplib.HTTPConnection('www.telize.com')
    conn.request('GET', '/geoip')
    res = conn.getresponse()
    body = res.read()
    geo = json.loads(body)
    return geo

def update_display():
    if fsm.current == 'clock':
        current_time_display()

def current_time_display():
    now = datetime.datetime.now()
    pm = False
    if now.hour >= 12:
        pm = True
    hour = now.hour % 12
    if hour == 0:
        hour = 12
    d0 = int(hour / 10)
    d1 = hour % 10
    d2 = int(now.minute / 10)
    d3 = now.minute % 10
    segment.disp.setBrightness(brightness)
    segment.setColon(1)
    segment.writeDigit(0, d0)
    segment.writeDigit(1, d1)
    segment.writeDigit(3, d2)
    segment.writeDigit(4, d3, dot=pm)

def onenter_state_clock(fsm):
    current_time_display()

def get_temp():
    global weather
    weather = ywclient.fetch_weather('loc_id', metric=False)

def onenter_state_temp(fsm):
    now = datetime.datetime.now()
    # today's forecast until noon, then tomorrow after
    idx = 0
    if now.hour >= 12:
        idx = 1
    temp = int(weather['forecast'][idx]['high'])
    d1 = temp % 10
    d2 = (temp % 100 - d1) / 10
    d3 = temp - (d2 * 10) - d1
    segment.setColon(0)
    if d3 == 0:
        segment.writeDigit(0, d2)
        segment.writeDigit(1, d1, dot=1)
        segment.writeDigit(3, 0)
        segment.writeDigit(4, 'F')
    else:
        segment.writeDigit(0, d3)
        segment.writeDigit(1, d2)
        segment.writeDigit(3, d1)
        segment.writeDigit(4, 'F')
    
def play_alarm():
    print('play_alarm not yet implemented')

def update_alarm():
    print('update_alarm not yet implemented')

def calc_offset():
    now = datetime.datetime.now()
    h = now.hour
    m = (now.minute + 1)%60
    if m == 0:
        h = h + 1
    zero = now.replace(hour = h, minute = m, second = 0, microsecond = 0)
    delta = zero - now

    interval = delta.total_seconds()
    if interval < 0:
        time.sleep(1)
        interval = calc_offset()
    print now
    print interval
    return interval

# should transition to clock state and call update_display
fsm.startup()

# setup the event loop to monitor timers and buttons
selector = Selector()
mode_button = pins.pin(0, direction=In, interrupt=Rising, pull=PullDown)
set_button  = pins.pin(1, direction=In, interrupt=Rising, pull=PullDown)

minute_timer = Timer(interval=60, offset=calc_offset())
minute_timer.start()
alarm_timer = Timer(offset=1)
temp_timer = Timer(interval=3600, offset=3600)
temp_timer.start

with selector, mode_button, set_button, minute_timer, alarm_timer, temp_timer:
    selector.add(mode_button)
    selector.add(set_button)
    selector.add(minute_timer)
    selector.add(alarm_timer)
    selector.add(temp_timer)
    
    while True:
        selector.wait()

        if selector.ready == minute_timer:
            minute_timer.wait()
            update_display()
        elif selector.ready == alarm_timer:
            print 'alarm timer tripped'
            alarm_timer.wait()
            # TODO: set a timeout for the next alarm in the queue
            play_alarm()
        elif selector.ready == temp_timer:
            get_temp()
        elif selector.ready == mode_button:
            print 'mode button press'
            fsm.mode()
        elif selector.ready == set_button:
            print 'set button press'
            if fsm.current == 'clock':
                brightness = (brightness + 1)%16
                print 'brightness=%i' % brightness
                update_display()
            elif fsm.current == 'alarm1':
                update_alarm(1)
            elif fsm.current == 'alarm2':
                update_alarm(2)
