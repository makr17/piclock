#!/usr/bin/env python

from Adafruit_7Segment import SevenSegment
from datetime import datetime, timedelta
from fysom import Fysom
import httplib
import json
import logging
from pytz import timezone
from quick2wire.gpio import pins, In, Out, Rising, Falling, Both, PullDown
from quick2wire.selector import Selector, Timer
from suds.client import Client
import time
from xml.dom.minidom import parseString

def get_geoip():
    conn = httplib.HTTPConnection('www.telize.com')
    conn.request('GET', '/geoip')
    res = conn.getresponse()
    body = res.read()
    geo = json.loads(body)
    return geo

def highTemps(geo):
    product = noaa.factory.create("ns0:productType")
    unit = noaa.factory.create("ns0:unitType")
    format = noaa.factory.create("ns0:formatType")
    wparams = noaa.factory.create("ns0:weatherParametersType")
    # request max temps (highs)
    wparams.maxt = 1

    # pull forecast for today and tomorrow (forward one day)
    begin = datetime.now()
    end = begin + timedelta(days=1)

    xml = noaa.service.NDFDgen(
        geo["latitude"],
        geo["longitude"],
        product["glance"],
        begin,
        end,
        unit["e"],
        wparams
    )
    dom = parseString(xml)
    nodes = dom.getElementsByTagName('temperature')[0].getElementsByTagName('value')
    temps = [int(x.childNodes[0].nodeValue) for x in nodes]
    return temps

logging.basicConfig(level=logging.INFO)

segment = SevenSegment(address=0x70)
brightness = 5
wsdl = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
noaa = Client(wsdl)
geo = get_geoip()
utc = timezone('UTC')
print 'timezone='+geo['timezone']
local = timezone(geo['timezone'])
temps = highTemps(geo)
print 'lat='+str(geo['latitude'])
print 'lon='+str(geo['longitude'])

def local_time():
    now = utc.localize(datetime.utcnow())
    localtime = now.astimezone(local)
    return localtime

def current_time_display():
    now = local_time()
    pm = False
    if now.hour >= 12:
        pm = True
    hour = now.hour % 12
    if hour == 0:
        hour = 12
    d0 = int(hour / 10)
    d1 = hour % 10
    d2 = int(now.minute / 10)
    d3 = now.minute % 10
    segment.disp.setBrightness(brightness)
    if d0 == 0:
        segment.disp.clear()
    else:
        segment.writeDigit(0, d0)
    segment.setColon(1)
    segment.writeDigit(1, d1)
    segment.writeDigit(3, d2)
    segment.writeDigit(4, d3, dot=pm)

def onclock(fsm):
    current_time_display()

def get_temp():
    global temps
    temps = highTemps(geo)

def ontemp(fsm):
    now = local_time()
    # today's forecast until noon, then tomorrow after
    idx = 0
    if now.hour >= 12:
        idx = 1
    temp = temps[idx]
    d1 = temp % 10
    d2 = (temp % 100 - d1) / 10
    d3 = temp - (d2 * 10) - d1
    segment.disp.clear()
    segment.setColon(0)
    if d3 != 0:
        segment.writeDigit(0, d3)
    segment.writeDigit(1, d2)
    segment.writeDigit(3, d1)
    segment.writeDigit(4, 15)

def ontimeout(fsm):
    print 'timeout'

def onalarm1(fsm):
    segment.writeDigit(0, 5)
    segment.writeDigit(1, 6)
    segment.writeDigit(3, 7)
    segment.writeDigit(4, 8)

def onalarm2(fsm):
    segment.writeDigit(0, 9)
    segment.writeDigit(1, 8)
    segment.writeDigit(3, 7)
    segment.writeDigit(4, 6)

def play_alarm():
    print('play_alarm not yet implemented')

def update_alarm():
    print('update_alarm not yet implemented')

def calc_offset():
    now = local_time()
    h = now.hour
    m = (now.minute + 1)%60
    if m == 0:
        h = h + 1
    zero = now.replace(hour = h, minute = m, second = 0, microsecond = 0)
    delta = zero - now

    interval = delta.total_seconds()
    if interval < 0:
        time.sleep(1)
        interval = calc_offset()
    return interval

# setup the statemachine
fsm = Fysom({'events': [
                {'name': 'startup', 'src': 'none', 'dst': 'clock'},
                {'name': 'mode', 'src': 'clock', 'dst': 'temp'},
                {'name': 'mode', 'src': 'temp', 'dst': 'alarm1'},
                {'name': 'mode', 'src': 'alarm1', 'dst': 'alarm2'},
                {'name': 'mode', 'src': 'alarm2', 'dst': 'clock'},
                {'name': 'timeout', 'src': '*', 'dst': 'clock'},
                {'name': 'alarm', 'src': '*', 'dst': 'alarm'},
                {'name': 'alarm_done', 'src': 'alarm', 'dst': 'clock'}
             ],
             'callbacks': {
                 'onclock': onclock,
                 'ontemp': ontemp,
                 'ontimeout': ontimeout,
                 'onalarm1': onalarm1,
                 'onalarm2': onalarm2
             }
})

def update_display():
    if fsm.current == 'clock':
        current_time_display()



# should transition to clock state and call update_display
fsm.startup()

# setup the event loop to monitor timers and buttons
selector = Selector()
mode_button = pins.pin(0, direction=In, interrupt=Rising, pull=PullDown)
set_button  = pins.pin(1, direction=In, interrupt=Rising, pull=PullDown)

minute_timer = Timer(interval=60, offset=calc_offset())
minute_timer.start()
alarm_timer = Timer(offset=1)
temp_timer = Timer(interval=3600, offset=3600)
temp_timer.start

with selector, mode_button, set_button, minute_timer, alarm_timer, temp_timer:
    selector.add(mode_button)
    selector.add(set_button)
    selector.add(minute_timer)
    selector.add(alarm_timer)
    selector.add(temp_timer)

    # go back to init state
    fsm.timeout()

    while True:
        selector.wait()

        if selector.ready == minute_timer:
            minute_timer.wait()
            update_display()
        elif selector.ready == alarm_timer:
            print 'alarm timer tripped'
            alarm_timer.wait()
            # TODO: set a timeout for the next alarm in the queue
            play_alarm()
        elif selector.ready == temp_timer:
            get_temp()
        elif selector.ready == mode_button:
            if mode_button.value == 1:
                fsm.mode()
        elif selector.ready == set_button:
            if set_button.value == 1:
                if fsm.current == 'clock':
                    brightness = (brightness + 1)%16
                    update_display()
                elif fsm.current == 'alarm1':
                    update_alarm(1)
                elif fsm.current == 'alarm2':
                    update_alarm(2)
